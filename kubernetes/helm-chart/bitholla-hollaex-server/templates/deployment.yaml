{{- if eq .Values.job.enable false }}

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{.Release.Name}}
    role: {{.Release.Namespace}}
  name: {{.Release.Name}}
  namespace: {{.Release.Namespace}}
spec:
  revisionHistoryLimit: 3
  replicas: {{.Values.stable.replicaCount}}

{{- if or (eq .Values.DEPLOYMENT_MODE "api") (eq .Values.DEPLOYMENT_MODE "stream") }}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

{{- else }}

  strategy:
    type: Recreate

{{- end }}

{{- if eq .Values.DEPLOYMENT_MODE "api" }}
  minReadySeconds: 15
{{- end }}

  selector:
    matchLabels:
      app: {{.Release.Name}}
      role: {{.Release.Namespace}}
      tier: backend
  template:
    metadata:
      # annotations:
      #   seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
      labels:
        app: {{.Release.Name}}
        role: {{.Release.Namespace}}
        tier: backend
    spec:
    
      securityContext:
        seccompProfile:
          type: RuntimeDefault

{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm: 
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                    - {{.Release.Namespace}}
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: {{.Release.Name}}
        image: {{.Values.imageRegistry}}:{{.Values.dockerTag}}
        imagePullPolicy: IfNotPresent

        securityContext:
          allowPrivilegeEscalation: false

{{- if eq .Values.DEPLOYMENT_MODE "api" }}

        command: ["/bin/bash"]
        args: ["-c", "ts-node app.ts"]

{{- else if eq .Values.DEPLOYMENT_MODE "stream" }}

        command: ["/bin/bash"]
        args: ["-c", "ts-node ws/index.ts"]

{{- else if eq .Values.DEPLOYMENT_MODE "plugins" }}

        command: ["/bin/bash"]
        args: ["-c", "ts-node plugins/index.ts"]

{{- end }}

        ports:
        - name: websocket-port
          containerPort: 10080
        - name: port
          containerPort: 10010
        - name: plugins-port
          containerPort: 10011

        envFrom:
          - configMapRef:
              name: {{.Values.envName}}
          - secretRef:
              name: {{.Values.secretName}}
        env:
          - name: PAIR
            value: {{.Values.PAIR}}
          - name: ELASTIC_APM_SERVICE_NAME
            value: {{.Release.Name}}
        
        resources:
          limits:
            memory: {{.Values.resources.limits.memory}}
            cpu: {{.Values.resources.limits.cpu}}
          requests:
            memory: {{.Values.resources.requests.memory}}
            cpu: {{.Values.resources.requests.cpu}}
        
{{- if .Values.podRestart_webhook_url }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "export hostname=`hostname` && curl -X POST -H 'Content-type: application/json' --data '{\"attachments\": [ { \"color\": \"#A569BD\", \"title\": \"ðŸ˜µ  Pod has been terminated!\", \"text\": \"Pod '\"${hostname}\"' just has been terminated.\" } ] }' {{.Values.podRestart_webhook_url}}"]
{{- end }}

{{- if eq .Values.DEPLOYMENT_MODE "api" }}
        readinessProbe:
          exec:
            command:
            - curl
            - http://localhost:10010/v2/health
          initialDelaySeconds: 1
          periodSeconds: 15
{{- end }}

{{- if eq .Values.DEPLOYMENT_MODE "stream" }}
        readinessProbe:
          exec:
            command:
            - curl
            - http://localhost:10080
          initialDelaySeconds: 1
          periodSeconds: 15
          
{{- end }}

{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
{{- end }}

{{- end }}